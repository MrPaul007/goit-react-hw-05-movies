{"version":3,"file":"static/js/973.8bcbcf5a.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/modules/SingleMovie/single-movie.module.css?2df4","modules/SingleMovie/SingleMovie.jsx","webpack://goit-react-hw-05-movies/./src/pages/SingleMoviePage/single-movie-page.module.css?180a","pages/SingleMoviePage/SingleMoviePage.jsx","shared/api/movies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieContent\":\"single-movie_movieContent__4Kx2x\",\"movieTextContent\":\"single-movie_movieTextContent__onlAk\"};","import styles from \"./single-movie.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst SingleMovie = ({title, poster_path, release_date, vote_average, overview, genres })=> {\n    const image = 'https://image.tmdb.org/t/p/w300' + poster_path;\n    const year = release_date.split('-');\n    console.log(genres)\n    \n    return (\n        <div className={styles.movieContent}>\n            <img src={image} alt={title} />\n            <div className={styles.movieTextContent}>\n                <h2>{title} ({year[0]})</h2>\n                <p>User Score: {vote_average*10}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{genres.length > 0 ?\n                    genres.map(({ name }) => name).join(\", \") :\n                    \"no Genres\"}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nSingleMovie.propTypes = {\n    item: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      genres: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string.isRequired,\n        })\n      ),\n      release_date: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n      overview: PropTypes.string.isRequired,\n    }),\n};\n\nexport default SingleMovie;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"single-movie-page_container__3ywxG\",\"info\":\"single-movie-page_info__Ozox1\",\"button\":\"single-movie-page_button__wRPwU\",\"link\":\"single-movie-page_link__OiV0s\"};","import {useState, useEffect} from \"react\";\nimport {Link, Outlet, useLocation, useParams, useNavigate } from \"react-router-dom\";\n\nimport SingleMovie from \"../../modules/SingleMovie/SingleMovie\";\nimport { getMovieById } from \"../../shared/api/movies\";\nimport styles from \"./single-movie-page.module.css\";\n\nconst SingleMoviePage = ()=> {\n    const [state, setState] = useState({\n        movie: {},\n        loading: false,\n        error: null,\n    });\n\n    const {id} = useParams();\n\n    const navigate = useNavigate();\n\n    const location = useLocation();\n\n    useEffect(()=> {\n        const fetchMovie = async() => {\n            setState(prevState => ({\n                ...prevState,\n                loading: true,\n            }));\n\n            try {\n                const movie = await getMovieById(id);\n                setState(prevState => ({\n                    ...prevState,\n                    movie,\n                    loading: false,\n                }))\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: false,\n                    error,\n                }))\n            }\n        };\n\n        fetchMovie();\n    }, [id]);\n\n    const prevPageLocation = location.state?.prevPageLocation || \"/\";\n\n    const goBack = () => navigate(prevPageLocation);\n\n    const {movie, loading, error} = state;\n\n    const isMovie = Object.keys(movie).length > 0;\n    console.log(movie)\n    return (\n        <main>\n            <div className=\"container\">\n                {loading && <p>...Loading</p>}\n                {error && <p>Movie not found</p>}\n                {isMovie && <>\n                              <div className={styles.container}>\n                              <button className={styles.button} onClick={goBack}>Go back</button>\n                              <SingleMovie {...movie} />\n                              </div>\n                              <div className={styles.info}>\n                                <h3>Additional information</h3>\n                                <ul>\n                                    <li  className={styles.link}>\n                                        <Link state={{prevPageLocation}} to={`cast`}>Cast</Link>\n                                    </li>\n                                    <li className={styles.link}>\n                                        <Link state={{prevPageLocation}} to={`reviews`}>Reviews</Link>\n                                    </li>\n                                </ul>\n                              </div>\n                              <Outlet />\n                            </>}\n                            \n            </div>\n        </main>\n    )\n}\n\nexport default SingleMoviePage;","import axios from \"axios\";\n\nconst API_KEY = \"dd208677c341fec119543dd378b0d37a\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n});\n\nexport const getMovies = async () => {\n    const { data: { results } } = await instance.get(\"trending/movie/day\", {\n        params:{\n            api_key: API_KEY,\n        }\n    });\n    return results;\n};\n\nexport const searchMovies = async (query) => {\n    const { data } = await instance.get(\"search/movie\", {\n        params:{\n            query,\n            api_key: API_KEY,\n        }\n    });\n    return data;\n};\n\nexport const getMovieById = async (id) => {\n    const { data } = await instance.get(`movie/${id}`, {\n        params:{\n            id,\n            api_key: API_KEY,\n        }\n    });\n    return data;\n};\n\nexport const getCast = async (id) => {\n    const { data: { cast } } = await instance.get(`movie/${id}/credits`, {\n        params:{\n            api_key: API_KEY,\n        }\n    });\n    return cast;\n};\n\nexport const getReviews = async (id) => {\n    const { data } = await instance.get(`movie/${id}/reviews`, {\n        params:{\n            api_key: API_KEY,\n        }\n    });\n    return data;\n};"],"names":["title","poster_path","release_date","vote_average","overview","genres","image","year","split","console","log","className","styles","src","alt","length","map","name","join","useState","movie","loading","error","state","setState","id","useParams","navigate","useNavigate","location","useLocation","useEffect","fetchMovie","prevState","getMovieById","prevPageLocation","isMovie","Object","keys","onClick","to","API_KEY","instance","axios","baseURL","getMovies","get","params","api_key","results","data","searchMovies","query","getCast","cast","getReviews"],"sourceRoot":""}