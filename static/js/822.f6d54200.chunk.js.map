{"version":3,"file":"static/js/822.f6d54200.chunk.js","mappings":"+QA2DA,EAtDoB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,CAC/BC,MAAO,GACPC,SAAS,EACTC,MAAO,KACPC,aAAc,IAJlB,eAAOC,EAAP,KAAcC,EAAd,KAOQC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAY,mCAAG,2FACjBJ,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdT,SAAS,OAHI,mBAOMU,EAAAA,EAAAA,IAAWL,GAPjB,OAOPM,EAPO,OAQbP,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdT,SAAS,EACTD,MAAOY,EAAKC,QACZV,aAAcS,EAAKE,mBAZV,gDAebT,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdT,SAAS,EACTC,MAAK,UAlBI,yDAAH,qDAuBlBO,MACD,CAACH,IAEJ,IAAQN,EAAwBI,EAAxBJ,MAAOG,EAAiBC,EAAjBD,aAETY,EAAWf,EAAMgB,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACvB,2BACI,qCAAaD,MACb,uBAAIC,MAFCZ,MAMb,OACI,2BACMH,IAAgB,oEACjBY,O,iMCpDPI,EAAU,mCAEVC,E,MAAWC,GAAAA,OAAa,CAC1BC,QAAS,kCAGAC,EAAS,mCAAG,sGACeH,EAASI,IAAI,qBAAsB,CACnEC,OAAO,CACHC,QAASP,KAHI,uBACLN,EADK,EACbD,KAAQC,QADK,kBAMdA,GANc,2CAAH,qDASTc,EAAY,mCAAG,WAAOC,GAAP,yFACDR,EAASI,IAAI,eAAgB,CAChDC,OAAO,CACHG,MAAAA,EACAF,QAASP,KAJO,uBAChBP,EADgB,EAChBA,KADgB,kBAOjBA,GAPiB,2CAAH,sDAUZiB,EAAY,mCAAG,WAAOvB,GAAP,yFACDc,EAASI,IAAT,gBAAsBlB,GAAM,CAC/CmB,OAAO,CACHnB,GAAAA,EACAoB,QAASP,KAJO,uBAChBP,EADgB,EAChBA,KADgB,kBAOjBA,GAPiB,2CAAH,sDAUZkB,EAAO,mCAAG,WAAOxB,GAAP,yFACcc,EAASI,IAAT,gBAAsBlB,EAAtB,YAAoC,CACjEmB,OAAO,CACHC,QAASP,KAHE,uBACHY,EADG,EACXnB,KAAQmB,KADG,kBAMZA,GANY,2CAAH,sDASPpB,EAAU,mCAAG,WAAOL,GAAP,yFACCc,EAASI,IAAT,gBAAsBlB,EAAtB,YAAoC,CACvDmB,OAAO,CACHC,QAASP,KAHK,uBACdP,EADc,EACdA,KADc,kBAMfA,GANe,2CAAH","sources":["pages/ReviewsPage/ReviewsPage.jsx","shared/api/movies.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { getReviews } from \"../../shared/api/movies\";\n\nconst ReviewsPage = () => {\n    const [state, setState] = useState({\n        items: [],\n        loading: false,\n        error: null,\n        totalReviews: 1\n    });\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        const fetchReviews = async () => {\n            setState(prevState => ({\n                ...prevState,\n                loading: true,\n            }));\n\n            try {\n                const data = await getReviews(id);\n                setState(prevState => ({\n                    ...prevState,\n                    loading: false,\n                    items: data.results,\n                    totalReviews: data.total_results\n                }))\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: false,\n                    error,\n                }))\n            }\n        };\n\n        fetchReviews()\n    }, [id])\n\n    const { items, totalReviews } = state;\n\n    const elements = items.map(({ id, author, content }) => \n        <li key={id}>\n            <h3>Author: {author}</h3>\n            <p>{content}</p>\n        </li>\n    )\n\n    return (\n        <ul>\n            {!totalReviews && <p>We don`t have any reviews for this movie</p>}\n            {elements}\n        </ul>\n    )\n}\n\nexport default ReviewsPage;","import axios from \"axios\";\n\nconst API_KEY = \"dd208677c341fec119543dd378b0d37a\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n});\n\nexport const getMovies = async () => {\n    const { data: { results } } = await instance.get(\"trending/movie/day\", {\n        params:{\n            api_key: API_KEY,\n        }\n    });\n    return results;\n};\n\nexport const searchMovies = async (query) => {\n    const { data } = await instance.get(\"search/movie\", {\n        params:{\n            query,\n            api_key: API_KEY,\n        }\n    });\n    return data;\n};\n\nexport const getMovieById = async (id) => {\n    const { data } = await instance.get(`movie/${id}`, {\n        params:{\n            id,\n            api_key: API_KEY,\n        }\n    });\n    return data;\n};\n\nexport const getCast = async (id) => {\n    const { data: { cast } } = await instance.get(`movie/${id}/credits`, {\n        params:{\n            api_key: API_KEY,\n        }\n    });\n    return cast;\n};\n\nexport const getReviews = async (id) => {\n    const { data } = await instance.get(`movie/${id}/reviews`, {\n        params:{\n            api_key: API_KEY,\n        }\n    });\n    return data;\n};"],"names":["useState","items","loading","error","totalReviews","state","setState","id","useParams","useEffect","fetchReviews","prevState","getReviews","data","results","total_results","elements","map","author","content","API_KEY","instance","axios","baseURL","getMovies","get","params","api_key","searchMovies","query","getMovieById","getCast","cast"],"sourceRoot":""}